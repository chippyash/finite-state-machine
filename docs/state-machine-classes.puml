@startuml
title Finite State Machine Classes
namespace Chippyash\StateMachine {
    interface "Interfaces\Describable" as Describable {
        getName(): string
        getDescription(): string
    }

    interface "Interfaces\StateAware" as StateAware {
        getState(): State
        setState(State $state): StateAware
        setPropagationStopped(bool $flag): StateGraphEvent
        getEventType(): StateGraphEventType
        setProcessMarker(bool $flag): StateGraphEvent
        getProcessmarker(): bool
    }

    interface "Interfaces\StateGraphEventable" as StateGraphEventable <? StoppableInterface>{
        getStateGraphTransition(): Transition
        getStateGraphObject(): StateAware
    }

    class "Traits\Describing" as Describing << (T, cyan)>>  {
        #name: string
        #description: string
    }
    Describable <|-- Describing

    class "Traits\StateGraphEventing" as StateGraphEventing << (T, cyan) >> {
        #stateGraphtransition: Transition
        #stateGraphobject: StateAware
        #stateProcessmarker: bool = false
        #propagationStopped: bool = false
        #stateGraphEventType: StateGraphEventType
    }
    StateGraphEventable <|-- StateGraphEventing
    class State <? Describable>{
        __construct(string $name, ?string $description = '')
    }

    class StateGraph <? Describable>{
        #graph: Graphviz\Graph
        #states: States
        #transitions: Transitions
        __construct(string $name, ?string $description = '')
        addState(State $state): StateGraph
        addTransition(State $from, State $to, Transition $transition): StateGraph
        getTransitionsForState(StateAware $statefulObject): Transitions
        isInitialState(State $state): bool
        isFinalState(State $state): bool
        getInitialStates(): States
        getNextStateForTransition(Transition $transition): State
        isValid(): bool
        getGraph(): Graph
        getTransitions(): Transitions
        getStates(): States
        transition(StateAware $object, Transition $transition): StateGraph
        __call(string $method, array $arguments = [])
    }

    class "Events\EventableStateGraph" as EventableStateGraph {
        eventListener(StateGraphEventable $event): StateGraphEventable
        setEventDispatcher(EventDispatcherInterface $dispatcher): StateGraph

    }
    EventableStateGraph --|> StateGraph
    EventableStateGraph *- StateGraphEvent
    class States <<Monad\Map>> {

    }
    State --o States

    class Transition <? Describable>{
        __construct(string $name, ?string $description = '')
    }
    Transition -o Transitions

    Describing --* State
    Describing --* Transition
    Describing --* StateGraph


    class Transitions <<Monad\Map>> {

    }

    class "Events\StateGraphEvent" as StateGraphEvent {
        __construct(Transition $transition, StateAware $object, ?StateGraphEventType $eventType = null)
    }
    StateGraphEventing --* StateGraphEvent

    enum "Events\StateGraphEventType" as StateGraphEventType {
        DO_TRANSITION
        START_TRANSITION
        END_TRANSITION
    }
    StateGraphEventType --* StateGraphEventing
    Transition --* StateGraphEventing
    StateAware --* StateGraphEventing
    Transition --* StateGraph
    Transitions --* StateGraph
    State --* StateGraph
    States --* StateGraph

}
@enduml